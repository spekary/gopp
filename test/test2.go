//** This file is code generated by gopp. Do not edit.

package test

import (
	"github.com/spekary/gopp"
)

type ThingI interface {
	gopp.BaseI

	WhoAmI() string
	Type() string
	Name() string
}

type Thing struct {
	gopp.Base
}

// New Thing creates a new Thing object and returns its matching interface
func NewThing() ThingI {
	t_ := Thing{}
	t_.Init(&t_)
	t_.Construct()
	return t_.I().(ThingI)
}

func (t_ *Thing) WhoAmI() string {
	return t_.I().(ThingI).Type() + ":" + t_.I().(ThingI).Name()
}

func (t_ *Thing) Type() string {
	return "Uknown"
}

func (t_ *Thing) Name() string {
	return "No Name"
}

func (t_ *Thing) IsA(className string) bool {
	if className == "Thing" {
		return true
	}
	return t_.Base.IsA(className)
}

func (t_ *Thing) Class() string {
	return "Thing"
}

type PersonI interface {
	ThingI

	ComplexReturn(data interface{}) (string, interface{})
	PointerReturn() *Thing
	SliceReturn() []Thing
	MapReturn() map[string]Thing
}

type Person struct {
	Thing
	first string
	last  string
}

// New Person creates a new Person object and returns its matching interface
func NewPerson(first string, last string) PersonI {
	p_ := Person{}
	p_.Init(&p_)
	p_.Construct(first, last)
	return p_.I().(PersonI)
}

func (p_ *Person) Construct(first string, last string) {
	p_.Thing.Construct()
	p_.first = first
	p_.last = last
}

func (p_ *Person) Type() string {
	return "Person"
}

func (p_ *Person) Name() string {
	return p_.first + " " + p_.last
}

func (p_ *Person) ComplexReturn(data interface{}) (string, interface{}) {
	return p_.first + " " + p_.last, 1
}

func (p_ *Person) PointerReturn() *Thing {
	a := Thing{}
	return &a
}

func (p_ *Person) SliceReturn() []Thing {
	a := []Thing{}
	return a
}

func (p_ *Person) MapReturn() map[string]Thing {
	a := make(map[string]Thing)
	return a
}

func (p_ *Person) IsA(className string) bool {
	if className == "Person" {
		return true
	}
	return p_.Thing.IsA(className)
}

func (p_ *Person) Class() string {
	return "Person"
}
