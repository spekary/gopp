/**
This file is code generated by gopp. Do not edit.
*/

package test

import (
	"github.com/spekary/gopp/gopp"
)


type Thing interface {
	gopp.Base
	WhoAmI () string 
	Type () string 
	Name () string 
}

type Thing_ struct {
	gopp.Base_
}

/**
NewThing creates a new Thing object.
*/
func NewThing() Thing {
	this := Thing_{}
	this.Init_(&this)
	this.Construct_()
	return this.I_().(Thing)
}

func (this *Thing_) WhoAmI() string {
		return this.I_().(Thing).Type() + ":" + this.I_().(Thing).Name()
	}

func (this *Thing_) Type() string {
		return "Uknown"
	}

func (this *Thing_) Name() string {
		return "No Name"
	}


func (this *Thing_) IsA(className string) bool {
	if (className == "Thing") {
		return true
	}
	return this.Base_.IsA(className)
}

func (this *Thing_) Class() string {
	return "Thing"
}


type Person interface {
	Thing
	Construct_ (first string, last string) 
	Type () string 
	Name () string 
}

type Person_ struct {
	Thing_
	first string
	last string
}

/**
NewPerson creates a new Person object.
*/
func NewPerson(first string, last string)  Person {
	this := Person_{}
	this.Init_(&this)
	this.Construct_(first,last)
	return this.I_().(Person)
}

func (this *Person_) Construct_(first string, last string) {
		this.Thing_.Construct_()
		this.first = first
		this.last = last
	}

func (this *Person_) Type() string {
		return "Person"
	}

func (this *Person_) Name() string {
		return this.first + " " + this.last
	}


func (this *Person_) IsA(className string) bool {
	if (className == "Person") {
		return true
	}
	return this.Thing_.IsA(className)
}

func (this *Person_) Class() string {
	return "Person"
}
