/**
This file is code generated by gopp. Do not edit.
*/

package blah

import (
	"github.com/spekary/gopp/gopp"
)


/**
Some comments
*/
type Test interface {
	gopp.Base
	Construct_ (me int) 
	My () 
	My2 () 
	My3 () 
}

type Test_ struct {
	gopp.Base_
	me int
}

/**
NewTest creates a new Test object.
*/
func NewTest(me int)  Test {
	this := Test_{}
	this.Init_(&this)
	this.Construct_(me)
	return this.I_().(Test)
}

func (this *Test_) Construct_(me int) {
		this.me = me
	}

func (this *Test_) My() {
		this.me = 4
		this.I_().(Test).My2()
	}

func (this *Test_) My2() {
			}

func (this *Test_) My3() {}



type A interface {
	Test
	Oh () 
}

type A_ struct {
	Test_
}

/**
NewA creates a new A object.
*/
func NewA(me int)  A {
	this := A_{}
	this.Init_(&this)
	this.Construct_(me)
	return this.I_().(A)
}

func (this *A_) Oh() {
		this.Test_.My()
		this.Test_.My3()
	}



/*
class Test2<T> extends gopp.Base {
	me <T>

	func Construct_(me <T>) {
		this.me = me
	}

	func GetMe() <T> {
		return this.me
	}
}

a := NewTest2<string>("blah")
*/