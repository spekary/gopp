//** This file is code generated by gopp. Do not edit.

package test

import (
	"github.com/spekary/gopp"
)

/**
Some comments
*/

type TestI interface {
	gopp.BaseI

	My()
	My2()
	My3()
}

type Test struct {
	gopp.Base
	me int
}

// New Test creates a new Test object and returns its matching interface
func NewTest(me int) TestI {
	t_ := Test{}
	t_.Init(&t_)
	t_.Construct(me)
	return t_.I().(TestI)
}

func (t_ *Test) Construct(me int) {
	t_.me = me
}

func (t_ *Test) My() {
	t_.me = 4
	t_.I().(TestI).My2()
}

func (t_ *Test) My2() {

}

func (t_ *Test) My3() {

}

func (t_ *Test) IsA(className string) bool {
	if className == "Test" {
		return true
	}
	return t_.Base.IsA(className)
}

func (t_ *Test) Class() string {
	return "Test"
}

type AI interface {
	TestI

	Oh()
}

type A struct {
	Test
}

// New A creates a new A object and returns its matching interface
func NewA() AI {
	a_ := A{}
	a_.Init(&a_)
	a_.Construct()
	return a_.I().(AI)
}

func (a_ *A) Construct() {
	a_.Test.Construct(1)
}

func (a_ *A) Oh() {
	a_.Test.My()
	a_.Test.My3()
}

func (a_ *A) IsA(className string) bool {
	if className == "A" {
		return true
	}
	return a_.Test.IsA(className)
}

func (a_ *A) Class() string {
	return "A"
}

/*
class Test2<T> extends gopp.Base {
	me <T>

	func Construct_(me <T>) {
		this.me = me
	}

	func GetMe() <T> {
		return this.me
	}
}

a := NewTest2<string>("blah")
*/
